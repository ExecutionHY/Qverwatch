#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 ShadowCoord;

in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

// Ouput data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D DiffuseTextureSampler;
uniform sampler2D NormalTextureSampler;
uniform sampler2D SpecularTextureSampler;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform vec3 LightPosition_worldspace;
uniform sampler2D shadowMap;
uniform int Surface;

vec2 poissonDisk[16] = vec2[](
                              vec2( -0.94201624, -0.39906216 ),
                              vec2( 0.94558609, -0.76890725 ),
                              vec2( -0.094184101, -0.92938870 ),
                              vec2( 0.34495938, 0.29387760 ),
                              vec2( -0.91588581, 0.45771432 ),
                              vec2( -0.81544232, -0.87912464 ),
                              vec2( -0.38277543, 0.27676845 ),
                              vec2( 0.97484398, 0.75648379 ),
                              vec2( 0.44323325, -0.97511554 ),
                              vec2( 0.53742981, -0.47373420 ),
                              vec2( -0.26496911, -0.41893023 ),
                              vec2( 0.79197514, 0.19090188 ),
                              vec2( -0.24188840, 0.99706507 ),
                              vec2( -0.81409955, 0.91437590 ),
                              vec2( 0.19984126, 0.78641367 ),
                              vec2( 0.14383161, -0.14100790 )
                              );

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
    vec4 seed4 = vec4(seed,i);
    float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
    return fract(sin(dot_product) * 43758.5453);
}

// ******************** PCSS *************************

in vec3 Normal_lightspace;
uniform float ZNear;
uniform float ZFar;

int GetBlockedNum(sampler2D sm, vec4 pos_lightspace, float bias, int detectTimes,float subPixWidth, vec2 dz_duv)
{
    int BlockedNum = 0;
    
    for(int i = -detectTimes; i <= detectTimes;i += 1)
        for(int j = -detectTimes;j <= detectTimes;j += 1)
        {
            vec2 deviation =  vec2(i,j) * subPixWidth;
            float devi_z = dot(deviation,dz_duv);
            BlockedNum += texture( sm, pos_lightspace.xy + deviation).x < (pos_lightspace.z + bias  + devi_z) ? 1 : 0;
            if(subPixWidth <= 0.0001 && BlockedNum > 0)
                return BlockedNum;
        }
    return BlockedNum;
}
bool isBlocked(float blockerDep, float recDep)
{
    if(blockerDep >= recDep - 0.01)
        return false;
    else 
        return true;
}
float ZClipToZCmra(float zClip)
{
    //return ZNear + zClip * (ZFar - ZNear);
    return ZFar*ZNear / (ZFar - zClip*(ZFar-ZNear));
    //	return zClip * 3.4f;
}
float AveBlockerZ(sampler2D sm, vec4 pos_lightspace, int detectTimes,float radius, vec2 dz_duv)
{
    float depthSum = 0.0f;
    int blocknum = 0;
    for(int i = 0;i<detectTimes;i++)
    {
        vec2 deviation =  poissonDisk[int(16*random(Position_worldspace.xyz,i))%16] * radius;
        float dz = dot(dz_duv,deviation);
        float temp =  texture( sm, pos_lightspace.xy + deviation).x;
        if(isBlocked(temp,pos_lightspace.z + dz))
        {
            depthSum += temp;
            blocknum ++;
        }
    }
    return depthSum/blocknum;
}
float GetVisibility(sampler2D sm, vec4 pos_lightspace, float bias, vec2 dz_duv, float penumWidth)
{
    float resVisibility = 0.0f;
    float poissonRadiu = penumWidth;
    int poissonTimes = 16;
    float perVisibility = (1.0/ poissonTimes );
    
    for(int k = 0;k < poissonTimes;k++)
    {
        vec2 deviation =  poissonDisk[(k * 17)%16] * poissonRadiu;
        float dz = dot(dz_duv,deviation);
        resVisibility += texture( sm, pos_lightspace.xy + deviation).x > (pos_lightspace.z - bias)? 1.0 : 0.0;
    }
    return   perVisibility *  resVisibility;
}
vec2 getDz_Duv(vec3 normal_lightspace)
{
    return vec2(-normal_lightspace.x / normal_lightspace.z , -normal_lightspace.y / normal_lightspace.z);
}
bool mayCastShad(vec4 posLightSpace)
{
    if(posLightSpace.x <= 0.01 || posLightSpace.x >= 0.99 ||
       posLightSpace.y <= 0.01 || posLightSpace.y >= 0.99 ||
       posLightSpace.z <= 0.01 || posLightSpace.z >= 0.99)
        return false;
    else
        return true;
}

float PCSS(sampler2D shadowMap,vec4 ShadowCoord, float cosTheta,vec3 Normal_lightspace)
{
    float resVisibility;
    if(!mayCastShad(ShadowCoord))
    {
        resVisibility = 1.0f;
    }
    else{
        //float bias = -clamp(0.0005 * tan(acos(cosTheta)), 0,0.005);
        int detectTimes = 2;
        vec2 dz_duv = getDz_Duv(Normal_lightspace);
        float bias = 0;//dz_duv = vec2(0,0);
        
        //float penumbra = LightSize * ((posCmra.z) -  aveBlckZCmra) / aveBlckZCmra;
        int nblock = GetBlockedNum(shadowMap, ShadowCoord, bias, detectTimes, 0.05, dz_duv);
        
        if (nblock == 0)//total lighted
        {
            resVisibility = 1.0f;
        }
        else// half shadow
        {
            float aveBlckZClip =  AveBlockerZ(shadowMap, ShadowCoord, 100, 0.001,dz_duv);
            float aveBlckZCmra = ZClipToZCmra(aveBlckZClip);
            float LightSize = 0.5;
            float penumbra = LightSize * ((ShadowCoord.z) -  aveBlckZClip) / aveBlckZClip;
            resVisibility = GetVisibility(shadowMap,ShadowCoord,bias,dz_duv, penumbra);
        }
        
    }
    return resVisibility;
}


void main(){
    
    // Light emission properties
    vec3 LightColor = vec3(1,1,1);
    //float LightPower = 1000000000.0f;
    float LightPower = 60000.0f;
    //float LightPower = 50.0f;
    
    // Material properties
    vec3 MaterialDiffuseColor = texture( DiffuseTextureSampler, UV ).rgb * 1.2;
    vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = texture( SpecularTextureSampler, UV ).rgb * 0.3;
    
    // Local normal, in tangent space. V tex coordinate is inverted because normal map is in TGA (not in DDS) for better quality
    vec3 TextureNormal_tangentspace = normalize(texture( NormalTextureSampler, vec2(UV.x,-UV.y) ).rgb*2.0 - 1.0);
    
    // Distance to the light
    float distance = length( LightPosition_worldspace - Position_worldspace );
    
    // Normal of the computed fragment, in camera space
    vec3 n = TextureNormal_tangentspace;
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize(LightDirection_tangentspace);
    // Cosine of the angle between the normal and the light direction,
    // clamped above 0
    //  - light is at the vertical of the triangle -> 1
    //  - light is perpendiular to the triangle -> 0
    //  - light is behind the triangle -> 0
    float cosTheta = clamp( dot( n,l ), 0, 1 );
    
    // Eye vector (towards the camera)
    vec3 E = normalize(EyeDirection_tangentspace);
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l,n);
    // Cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosAlpha = clamp( dot( E,R ), 0, 1 );
    
    //float visibility = PCSS( shadowMap, ShadowCoord,  cosTheta, Normal_lightspace);
    
    
    // ****** Simple shadow-mapping *****
    
    float visibility=1.0;
    
    if(mayCastShad(ShadowCoord)) {
    
    // Fixed bias, or...
    //float bias = 0.00005;
    
    // ...variable bias
    //float bias = 0.005*tan(acos(cosTheta));
    //bias = clamp(bias, 0,0.01);
    float bias = 0;
    
    // Sample the shadow map 40 times
    for (int i = 0; i < 40; i++){
        // use either :
        //  - Always the same samples.
        //    Gives a fixed pattern in the shadow, but no noise
        // int index = i;
        
        //  - A random sample, based on the pixel's screen location.
        //    No banding, but the shadow moves with the camera, which looks weird.
        //int index = int(16.0*random(gl_FragCoord.xyy, i))%16;
        int index = int(16.0*random(gl_FragCoord.xxy, i))%16;
        
        //  - A random sample, based on the pixel's position in world space.
        //    The position is rounded to the millimeter to avoid too much aliasing
        // int index = int(16.0*random(floor(Position_worldspace.xyz*1000.0), i))%16;
        
        // being fully in the shadow will eat up 4*0.2 = 0.8
        // 0.2 potentially remain, which is quite dark.
        if ( texture( shadowMap, (ShadowCoord.xy/ShadowCoord.w) ).r  <  (ShadowCoord.z-bias)/ShadowCoord.w )
            visibility -= 0.02;
        //visibility -= 0.02*(1.0-texture( shadowMap, vec3(ShadowCoord.xy + poissonDisk[index]/300.0),  (ShadowCoord.z-bias)/ShadowCoord.w) ));
    }
    
    // For spot lights, use either one of these lines instead.
    // if ( texture( shadowMap, (ShadowCoord.xy/ShadowCoord.w) ).z  <  (ShadowCoord.z-bias)/ShadowCoord.w )
    // if ( textureProj( shadowMap, ShadowCoord.xyw ).z  <  (ShadowCoord.z-bias)/ShadowCoord.w )
    }
    
    color =
    // Ambient : simulates indirect lighting
    MaterialAmbientColor +
    // Diffuse : "color" of the object
    visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
    // Specular : reflective highlight, like a mirror
    visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
    
    /*
     color =
     // Ambient : simulates indirect lighting
     MaterialAmbientColor +
     // Diffuse : "color" of the object
     visibility * MaterialDiffuseColor * LightColor * LightPower * ((Surface == 0) ? cosTheta : (Surface == 1) ? (cosTheta*0.2 + 0.5) : (Surface == 2) ? 0.1 : 1) / pow(distance, 2) +
     // Specular : reflective highlight, like a mirror
     visibility * MaterialSpecularColor * LightColor * LightPower * ((Surface == 0) ? pow(cosAlpha,5) : (Surface == 1) ? (pow(cosAlpha*0.2,5) + 0.5) : (Surface == 2) ? 0.1 : 1) / pow(distance, 2);
     */
}
